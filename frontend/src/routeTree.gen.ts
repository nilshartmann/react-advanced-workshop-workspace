/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TasksRouteImport } from "./routes/tasks/route";
import { Route as StaticRouteImport } from "./routes/_static/route";
import { Route as IndexImport } from "./routes/index";
import { Route as TasksIndexImport } from "./routes/tasks/index";
import { Route as DashboardIndexImport } from "./routes/dashboard/index";
import { Route as StaticPrivacyImport } from "./routes/_static/privacy";
import { Route as StaticAboutImport } from "./routes/_static/about";
import { Route as TasksTaskIdIndexImport } from "./routes/tasks/$taskId/index";

// Create/Update Routes

const TasksRouteRoute = TasksRouteImport.update({
  id: "/tasks",
  path: "/tasks",
  getParentRoute: () => rootRoute,
} as any);

const StaticRouteRoute = StaticRouteImport.update({
  id: "/_static",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const TasksIndexRoute = TasksIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => TasksRouteRoute,
} as any);

const DashboardIndexRoute = DashboardIndexImport.update({
  id: "/dashboard/",
  path: "/dashboard/",
  getParentRoute: () => rootRoute,
} as any);

const StaticPrivacyRoute = StaticPrivacyImport.update({
  id: "/privacy",
  path: "/privacy",
  getParentRoute: () => StaticRouteRoute,
} as any);

const StaticAboutRoute = StaticAboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => StaticRouteRoute,
} as any);

const TasksTaskIdIndexRoute = TasksTaskIdIndexImport.update({
  id: "/$taskId/",
  path: "/$taskId/",
  getParentRoute: () => TasksRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_static": {
      id: "/_static";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof StaticRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/tasks": {
      id: "/tasks";
      path: "/tasks";
      fullPath: "/tasks";
      preLoaderRoute: typeof TasksRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_static/about": {
      id: "/_static/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof StaticAboutImport;
      parentRoute: typeof StaticRouteImport;
    };
    "/_static/privacy": {
      id: "/_static/privacy";
      path: "/privacy";
      fullPath: "/privacy";
      preLoaderRoute: typeof StaticPrivacyImport;
      parentRoute: typeof StaticRouteImport;
    };
    "/dashboard/": {
      id: "/dashboard/";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/tasks/": {
      id: "/tasks/";
      path: "/";
      fullPath: "/tasks/";
      preLoaderRoute: typeof TasksIndexImport;
      parentRoute: typeof TasksRouteImport;
    };
    "/tasks/$taskId/": {
      id: "/tasks/$taskId/";
      path: "/$taskId";
      fullPath: "/tasks/$taskId";
      preLoaderRoute: typeof TasksTaskIdIndexImport;
      parentRoute: typeof TasksRouteImport;
    };
  }
}

// Create and export the route tree

interface StaticRouteRouteChildren {
  StaticAboutRoute: typeof StaticAboutRoute;
  StaticPrivacyRoute: typeof StaticPrivacyRoute;
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticAboutRoute: StaticAboutRoute,
  StaticPrivacyRoute: StaticPrivacyRoute,
};

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
);

interface TasksRouteRouteChildren {
  TasksIndexRoute: typeof TasksIndexRoute;
  TasksTaskIdIndexRoute: typeof TasksTaskIdIndexRoute;
}

const TasksRouteRouteChildren: TasksRouteRouteChildren = {
  TasksIndexRoute: TasksIndexRoute,
  TasksTaskIdIndexRoute: TasksTaskIdIndexRoute,
};

const TasksRouteRouteWithChildren = TasksRouteRoute._addFileChildren(
  TasksRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof StaticRouteRouteWithChildren;
  "/tasks": typeof TasksRouteRouteWithChildren;
  "/about": typeof StaticAboutRoute;
  "/privacy": typeof StaticPrivacyRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/tasks/": typeof TasksIndexRoute;
  "/tasks/$taskId": typeof TasksTaskIdIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof StaticRouteRouteWithChildren;
  "/about": typeof StaticAboutRoute;
  "/privacy": typeof StaticPrivacyRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/tasks": typeof TasksIndexRoute;
  "/tasks/$taskId": typeof TasksTaskIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_static": typeof StaticRouteRouteWithChildren;
  "/tasks": typeof TasksRouteRouteWithChildren;
  "/_static/about": typeof StaticAboutRoute;
  "/_static/privacy": typeof StaticPrivacyRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/tasks/": typeof TasksIndexRoute;
  "/tasks/$taskId/": typeof TasksTaskIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/tasks"
    | "/about"
    | "/privacy"
    | "/dashboard"
    | "/tasks/"
    | "/tasks/$taskId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | ""
    | "/about"
    | "/privacy"
    | "/dashboard"
    | "/tasks"
    | "/tasks/$taskId";
  id:
    | "__root__"
    | "/"
    | "/_static"
    | "/tasks"
    | "/_static/about"
    | "/_static/privacy"
    | "/dashboard/"
    | "/tasks/"
    | "/tasks/$taskId/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  StaticRouteRoute: typeof StaticRouteRouteWithChildren;
  TasksRouteRoute: typeof TasksRouteRouteWithChildren;
  DashboardIndexRoute: typeof DashboardIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StaticRouteRoute: StaticRouteRouteWithChildren,
  TasksRouteRoute: TasksRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_static",
        "/tasks",
        "/dashboard/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_static": {
      "filePath": "_static/route.tsx",
      "children": [
        "/_static/about",
        "/_static/privacy"
      ]
    },
    "/tasks": {
      "filePath": "tasks/route.tsx",
      "children": [
        "/tasks/",
        "/tasks/$taskId/"
      ]
    },
    "/_static/about": {
      "filePath": "_static/about.tsx",
      "parent": "/_static"
    },
    "/_static/privacy": {
      "filePath": "_static/privacy.tsx",
      "parent": "/_static"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx",
      "parent": "/tasks"
    },
    "/tasks/$taskId/": {
      "filePath": "tasks/$taskId/index.tsx",
      "parent": "/tasks"
    }
  }
}
ROUTE_MANIFEST_END */
